// Copyright (2019) Cobalt Speech and Language Inc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: juzu.proto

package juzupb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The encoding of the audio data to be sent for recognition.
//
// For best results, the audio source should be captured and transmitted using
// the RAW_LINEAR16 encoding.
type DiarizationConfig_Encoding int32

const (
	// Raw (headerless) Uncompressed 16-bit signed little endian samples (linear
	// PCM), single channel, sampled at the rate expected by the chosen `Model`.
	DiarizationConfig_RAW_LINEAR16 DiarizationConfig_Encoding = 0
	// WAV (data with RIFF headers), with data sampled at a rate equal to or
	// higher than the sample rate expected by the chosen Model.
	DiarizationConfig_WAV DiarizationConfig_Encoding = 1
	// FLAC data, sampled at a rate equal to or higher than the sample rate
	// expected by the chosen Model.
	DiarizationConfig_FLAC DiarizationConfig_Encoding = 2
)

// Enum value maps for DiarizationConfig_Encoding.
var (
	DiarizationConfig_Encoding_name = map[int32]string{
		0: "RAW_LINEAR16",
		1: "WAV",
		2: "FLAC",
	}
	DiarizationConfig_Encoding_value = map[string]int32{
		"RAW_LINEAR16": 0,
		"WAV":          1,
		"FLAC":         2,
	}
)

func (x DiarizationConfig_Encoding) Enum() *DiarizationConfig_Encoding {
	p := new(DiarizationConfig_Encoding)
	*p = x
	return p
}

func (x DiarizationConfig_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiarizationConfig_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_juzu_proto_enumTypes[0].Descriptor()
}

func (DiarizationConfig_Encoding) Type() protoreflect.EnumType {
	return &file_juzu_proto_enumTypes[0]
}

func (x DiarizationConfig_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiarizationConfig_Encoding.Descriptor instead.
func (DiarizationConfig_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{6, 0}
}

// The top-level message sent by the client for the `StreamingDiarize`
// request.  Multiple `StreamingDiarizeRequest` messages are sent. The first
// message must contain a `DiarizationConfig` message only, and all subsequent
// messages must contain `DiarizationAudio ` only.  All `DiarizationAudio `
// messages must contain non-empty audio.  If audio content is empty, the server
// may interpret it as end of stream and stop accepting any further messages.
type StreamingDiarizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*StreamingDiarizeRequest_Config
	//	*StreamingDiarizeRequest_Audio
	Request isStreamingDiarizeRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingDiarizeRequest) Reset() {
	*x = StreamingDiarizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingDiarizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingDiarizeRequest) ProtoMessage() {}

func (x *StreamingDiarizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingDiarizeRequest.ProtoReflect.Descriptor instead.
func (*StreamingDiarizeRequest) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{0}
}

func (m *StreamingDiarizeRequest) GetRequest() isStreamingDiarizeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingDiarizeRequest) GetConfig() *DiarizationConfig {
	if x, ok := x.GetRequest().(*StreamingDiarizeRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingDiarizeRequest) GetAudio() *DiarizationAudio {
	if x, ok := x.GetRequest().(*StreamingDiarizeRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamingDiarizeRequest_Request interface {
	isStreamingDiarizeRequest_Request()
}

type StreamingDiarizeRequest_Config struct {
	Config *DiarizationConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingDiarizeRequest_Audio struct {
	Audio *DiarizationAudio `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamingDiarizeRequest_Config) isStreamingDiarizeRequest_Request() {}

func (*StreamingDiarizeRequest_Audio) isStreamingDiarizeRequest_Request() {}

// The message sent by the server for the `Version` method.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the juzu library handling the recognition.
	Juzu string `protobuf:"bytes,1,opt,name=juzu,proto3" json:"juzu,omitempty"`
	// version of the server handling these requests.
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetJuzu() string {
	if x != nil {
		return x.Juzu
	}
	return ""
}

func (x *VersionResponse) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

// The message sent by the server for the `ListModels` method.
type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of models available for use that match the request.
	Models []*Model `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{2}
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// Description of a Juzu Diarization Model.
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the model. This identifier is used to choose the
	// model that should be used for diarization, and is specified in the
	// `DiarizationConfig` message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Model name.  This is a concise name describing the model, and maybe
	// presented to the end-user, for example, to help choose which model to use.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Model attributes.
	Attributes *ModelAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{3}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetAttributes() *ModelAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attributes of a Juzu Diarization Model.
type ModelAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audio sample rate supported by the model.
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// The type of segmentation (fixed / variable) supported by the model.
	SegmentationType string `protobuf:"bytes,2,opt,name=segmentation_type,json=segmentationType,proto3" json:"segmentation_type,omitempty"`
}

func (x *ModelAttributes) Reset() {
	*x = ModelAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelAttributes) ProtoMessage() {}

func (x *ModelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelAttributes.ProtoReflect.Descriptor instead.
func (*ModelAttributes) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{4}
}

func (x *ModelAttributes) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *ModelAttributes) GetSegmentationType() string {
	if x != nil {
		return x.SegmentationType
	}
	return ""
}

// Collection of sequence of diarization results in a portion of audio.
// Juzu currently requires the full audio to determine which audio segments
// belong to which speaker.
type DiarizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DiarizationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DiarizationResponse) Reset() {
	*x = DiarizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationResponse) ProtoMessage() {}

func (x *DiarizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationResponse.ProtoReflect.Descriptor instead.
func (*DiarizationResponse) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{5}
}

func (x *DiarizationResponse) GetResults() []*DiarizationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Configuration for setting up a Diarizer.
type DiarizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the diarization model to use on the server.
	// Can be obtained by first getting list of models
	// on the server via ListModels().
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// The number of speakers expected in the audio;
	// If the number of speakers is unknown, set to 0.
	NumSpeakers uint32 `protobuf:"varint,2,opt,name=num_speakers,json=numSpeakers,proto3" json:"num_speakers,omitempty"`
	// Sampling rate of the audio to process.
	SampleRate uint32 `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Encoding of audio data sent/streamed through the `DiarizationAudio`
	// messages.  For encodings like WAV/MP3 that have headers, the headers are
	// expected to be sent at the beginning of the stream, not in every
	// `DiarizationAudio` message.
	//
	// If not specified, the default encoding is RAW_LINEAR16.
	//
	// Depending on how they are configured, server instances of this service may
	// not support all the encodings enumerated above. They are always required to
	// accept RAW_LINEAR16.  If any other `Encoding` is specified, and it is not
	// available on the server being used, the recognition request will result in
	// an appropriate error message.
	AudioEncoding DiarizationConfig_Encoding `protobuf:"varint,4,opt,name=audio_encoding,json=audioEncoding,proto3,enum=cobaltspeech.juzu.DiarizationConfig_Encoding" json:"audio_encoding,omitempty"`
	// Unique identifier of the cubic model to be used for speech recognition. If
	// this value is specified, transcription results from the cubic model with
	// the given ID will also be returned alongside speaker labels. If it omitted
	// or blank, the results will not include transcripts, even if Cubic server
	// was included in the deployed image.
	CubicModelId string `protobuf:"bytes,5,opt,name=cubic_model_id,json=cubicModelId,proto3" json:"cubic_model_id,omitempty"`
	// Returns unformatted transcript.
	EnableRawTranscript bool `protobuf:"varint,6,opt,name=enable_raw_transcript,json=enableRawTranscript,proto3" json:"enable_raw_transcript,omitempty"`
}

func (x *DiarizationConfig) Reset() {
	*x = DiarizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationConfig) ProtoMessage() {}

func (x *DiarizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationConfig.ProtoReflect.Descriptor instead.
func (*DiarizationConfig) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{6}
}

func (x *DiarizationConfig) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *DiarizationConfig) GetNumSpeakers() uint32 {
	if x != nil {
		return x.NumSpeakers
	}
	return 0
}

func (x *DiarizationConfig) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *DiarizationConfig) GetAudioEncoding() DiarizationConfig_Encoding {
	if x != nil {
		return x.AudioEncoding
	}
	return DiarizationConfig_RAW_LINEAR16
}

func (x *DiarizationConfig) GetCubicModelId() string {
	if x != nil {
		return x.CubicModelId
	}
	return ""
}

func (x *DiarizationConfig) GetEnableRawTranscript() bool {
	if x != nil {
		return x.EnableRawTranscript
	}
	return false
}

// Audio to be sent to the diarizer.
type DiarizationAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DiarizationAudio) Reset() {
	*x = DiarizationAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationAudio) ProtoMessage() {}

func (x *DiarizationAudio) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationAudio.ProtoReflect.Descriptor instead.
func (*DiarizationAudio) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{7}
}

func (x *DiarizationAudio) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A diarization result corresponding to a portion of audio.
type DiarizationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diarized segments containing speaker labels, timestamps and transcripts.
	Segments []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Set of labels used to identify speakers in each segment.
	SpeakerLabels []string `protobuf:"bytes,2,rep,name=speaker_labels,json=speakerLabels,proto3" json:"speaker_labels,omitempty"`
	// If this is set to true, it denotes that the result is an interim partial
	// result, and could change after more audio is processed.  If unset, or set
	// to false, it denotes that this is a final result and will not change.
	//
	// Servers are not required to implement support for returning partial
	// results, and clients should generally not depend on their availability.
	IsPartial bool `protobuf:"varint,3,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
}

func (x *DiarizationResult) Reset() {
	*x = DiarizationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationResult) ProtoMessage() {}

func (x *DiarizationResult) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationResult.ProtoReflect.Descriptor instead.
func (*DiarizationResult) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{8}
}

func (x *DiarizationResult) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *DiarizationResult) GetSpeakerLabels() []string {
	if x != nil {
		return x.SpeakerLabels
	}
	return nil
}

func (x *DiarizationResult) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

// A diarized segment of audio.
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the speaker for this segment.
	SpeakerLabel string `protobuf:"bytes,1,opt,name=speaker_label,json=speakerLabel,proto3" json:"speaker_label,omitempty"`
	// Time offset relative to the beginning of audio received by the diarizer
	// and corresponding to the start of this segment.
	StartTime *durationpb.Duration `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time offset relative to the beginning of audio received by the diarizer
	// and corresponding to the end of this segment.
	EndTime *durationpb.Duration `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Text representing the transcription of the words that the speaker spoke.
	// Formatting options are set in cubicsvr.
	Transcript string `protobuf:"bytes,4,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Words in the transcript, their timestamps and confidence scores.
	Words []*WordInfo `protobuf:"bytes,5,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{9}
}

func (x *Segment) GetSpeakerLabel() string {
	if x != nil {
		return x.SpeakerLabel
	}
	return ""
}

func (x *Segment) GetStartTime() *durationpb.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Segment) GetEndTime() *durationpb.Duration {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Segment) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *Segment) GetWords() []*WordInfo {
	if x != nil {
		return x.Words
	}
	return nil
}

// Word-specific information for recognized words.
type WordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual word in the text.
	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	// Confidence estimate between 0 and 1.  A higher number represents a
	// higher likelihood that the word was correctly recognized.
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Time offset relative to the beginning of audio received by the recognizer
	// and corresponding to the start of this spoken word.
	StartTime *durationpb.Duration `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the current word in the spoken audio.
	Duration *durationpb.Duration `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WordInfo) Reset() {
	*x = WordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_juzu_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordInfo) ProtoMessage() {}

func (x *WordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_juzu_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordInfo.ProtoReflect.Descriptor instead.
func (*WordInfo) Descriptor() ([]byte, []int) {
	return file_juzu_proto_rawDescGZIP(), []int{10}
}

func (x *WordInfo) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *WordInfo) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *WordInfo) GetStartTime() *durationpb.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WordInfo) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_juzu_proto protoreflect.FileDescriptor

var file_juzu_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x7a, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6a, 0x75, 0x7a, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x46, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a,
	0x75, 0x7a, 0x75, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd3,
	0x02, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e,
	0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x62,
	0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x62, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x22, 0x2f, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x41, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x31, 0x36, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41, 0x56, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c,
	0x41, 0x43, 0x10, 0x02, 0x22, 0x26, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a,
	0x11, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0xf1, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x31, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xcc, 0x02, 0x0a, 0x04, 0x4a, 0x75, 0x7a, 0x75, 0x12,
	0x5b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x6a, 0x75, 0x7a, 0x75, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x69, 0x7a,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1f, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x6a, 0x75, 0x7a, 0x75,
	0x70, 0x62, 0xaa, 0x02, 0x11, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x4a, 0x75, 0x7a, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_juzu_proto_rawDescOnce sync.Once
	file_juzu_proto_rawDescData = file_juzu_proto_rawDesc
)

func file_juzu_proto_rawDescGZIP() []byte {
	file_juzu_proto_rawDescOnce.Do(func() {
		file_juzu_proto_rawDescData = protoimpl.X.CompressGZIP(file_juzu_proto_rawDescData)
	})
	return file_juzu_proto_rawDescData
}

var file_juzu_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_juzu_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_juzu_proto_goTypes = []interface{}{
	(DiarizationConfig_Encoding)(0), // 0: cobaltspeech.juzu.DiarizationConfig.Encoding
	(*StreamingDiarizeRequest)(nil), // 1: cobaltspeech.juzu.StreamingDiarizeRequest
	(*VersionResponse)(nil),         // 2: cobaltspeech.juzu.VersionResponse
	(*ListModelsResponse)(nil),      // 3: cobaltspeech.juzu.ListModelsResponse
	(*Model)(nil),                   // 4: cobaltspeech.juzu.Model
	(*ModelAttributes)(nil),         // 5: cobaltspeech.juzu.ModelAttributes
	(*DiarizationResponse)(nil),     // 6: cobaltspeech.juzu.DiarizationResponse
	(*DiarizationConfig)(nil),       // 7: cobaltspeech.juzu.DiarizationConfig
	(*DiarizationAudio)(nil),        // 8: cobaltspeech.juzu.DiarizationAudio
	(*DiarizationResult)(nil),       // 9: cobaltspeech.juzu.DiarizationResult
	(*Segment)(nil),                 // 10: cobaltspeech.juzu.Segment
	(*WordInfo)(nil),                // 11: cobaltspeech.juzu.WordInfo
	(*durationpb.Duration)(nil),     // 12: google.protobuf.Duration
	(*emptypb.Empty)(nil),           // 13: google.protobuf.Empty
}
var file_juzu_proto_depIdxs = []int32{
	7,  // 0: cobaltspeech.juzu.StreamingDiarizeRequest.config:type_name -> cobaltspeech.juzu.DiarizationConfig
	8,  // 1: cobaltspeech.juzu.StreamingDiarizeRequest.audio:type_name -> cobaltspeech.juzu.DiarizationAudio
	4,  // 2: cobaltspeech.juzu.ListModelsResponse.models:type_name -> cobaltspeech.juzu.Model
	5,  // 3: cobaltspeech.juzu.Model.attributes:type_name -> cobaltspeech.juzu.ModelAttributes
	9,  // 4: cobaltspeech.juzu.DiarizationResponse.results:type_name -> cobaltspeech.juzu.DiarizationResult
	0,  // 5: cobaltspeech.juzu.DiarizationConfig.audio_encoding:type_name -> cobaltspeech.juzu.DiarizationConfig.Encoding
	10, // 6: cobaltspeech.juzu.DiarizationResult.segments:type_name -> cobaltspeech.juzu.Segment
	12, // 7: cobaltspeech.juzu.Segment.start_time:type_name -> google.protobuf.Duration
	12, // 8: cobaltspeech.juzu.Segment.end_time:type_name -> google.protobuf.Duration
	11, // 9: cobaltspeech.juzu.Segment.words:type_name -> cobaltspeech.juzu.WordInfo
	12, // 10: cobaltspeech.juzu.WordInfo.start_time:type_name -> google.protobuf.Duration
	12, // 11: cobaltspeech.juzu.WordInfo.duration:type_name -> google.protobuf.Duration
	13, // 12: cobaltspeech.juzu.Juzu.Version:input_type -> google.protobuf.Empty
	13, // 13: cobaltspeech.juzu.Juzu.ListModels:input_type -> google.protobuf.Empty
	1,  // 14: cobaltspeech.juzu.Juzu.StreamingDiarize:input_type -> cobaltspeech.juzu.StreamingDiarizeRequest
	2,  // 15: cobaltspeech.juzu.Juzu.Version:output_type -> cobaltspeech.juzu.VersionResponse
	3,  // 16: cobaltspeech.juzu.Juzu.ListModels:output_type -> cobaltspeech.juzu.ListModelsResponse
	6,  // 17: cobaltspeech.juzu.Juzu.StreamingDiarize:output_type -> cobaltspeech.juzu.DiarizationResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_juzu_proto_init() }
func file_juzu_proto_init() {
	if File_juzu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_juzu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingDiarizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_juzu_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_juzu_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamingDiarizeRequest_Config)(nil),
		(*StreamingDiarizeRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_juzu_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_juzu_proto_goTypes,
		DependencyIndexes: file_juzu_proto_depIdxs,
		EnumInfos:         file_juzu_proto_enumTypes,
		MessageInfos:      file_juzu_proto_msgTypes,
	}.Build()
	File_juzu_proto = out.File
	file_juzu_proto_rawDesc = nil
	file_juzu_proto_goTypes = nil
	file_juzu_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JuzuClient is the client API for Juzu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JuzuClient interface {
	// Queries the Version of the Server.
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Retrieves a list of available diarization models.
	ListModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Performs bidirectional streaming to enable on-the-go processing of
	// audio files, as well as the option to receive partial transcripts of
	// audio along with speaker IDs. This method is not truly streaming for
	// diarization yet, as results are received after specific chunks of audio
	// have been sent. This method is only available via GRPC and not via HTTP+JSON.
	// However, a web browser may use websockets to use this service.
	StreamingDiarize(ctx context.Context, opts ...grpc.CallOption) (Juzu_StreamingDiarizeClient, error)
}

type juzuClient struct {
	cc grpc.ClientConnInterface
}

func NewJuzuClient(cc grpc.ClientConnInterface) JuzuClient {
	return &juzuClient{cc}
}

func (c *juzuClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.juzu.Juzu/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juzuClient) ListModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.juzu.Juzu/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juzuClient) StreamingDiarize(ctx context.Context, opts ...grpc.CallOption) (Juzu_StreamingDiarizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Juzu_serviceDesc.Streams[0], "/cobaltspeech.juzu.Juzu/StreamingDiarize", opts...)
	if err != nil {
		return nil, err
	}
	x := &juzuStreamingDiarizeClient{stream}
	return x, nil
}

type Juzu_StreamingDiarizeClient interface {
	Send(*StreamingDiarizeRequest) error
	Recv() (*DiarizationResponse, error)
	grpc.ClientStream
}

type juzuStreamingDiarizeClient struct {
	grpc.ClientStream
}

func (x *juzuStreamingDiarizeClient) Send(m *StreamingDiarizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *juzuStreamingDiarizeClient) Recv() (*DiarizationResponse, error) {
	m := new(DiarizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JuzuServer is the server API for Juzu service.
type JuzuServer interface {
	// Queries the Version of the Server.
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// Retrieves a list of available diarization models.
	ListModels(context.Context, *emptypb.Empty) (*ListModelsResponse, error)
	// Performs bidirectional streaming to enable on-the-go processing of
	// audio files, as well as the option to receive partial transcripts of
	// audio along with speaker IDs. This method is not truly streaming for
	// diarization yet, as results are received after specific chunks of audio
	// have been sent. This method is only available via GRPC and not via HTTP+JSON.
	// However, a web browser may use websockets to use this service.
	StreamingDiarize(Juzu_StreamingDiarizeServer) error
}

// UnimplementedJuzuServer can be embedded to have forward compatible implementations.
type UnimplementedJuzuServer struct {
}

func (*UnimplementedJuzuServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedJuzuServer) ListModels(context.Context, *emptypb.Empty) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (*UnimplementedJuzuServer) StreamingDiarize(Juzu_StreamingDiarizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDiarize not implemented")
}

func RegisterJuzuServer(s *grpc.Server, srv JuzuServer) {
	s.RegisterService(&_Juzu_serviceDesc, srv)
}

func _Juzu_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuzuServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.juzu.Juzu/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuzuServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Juzu_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuzuServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.juzu.Juzu/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuzuServer).ListModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Juzu_StreamingDiarize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JuzuServer).StreamingDiarize(&juzuStreamingDiarizeServer{stream})
}

type Juzu_StreamingDiarizeServer interface {
	Send(*DiarizationResponse) error
	Recv() (*StreamingDiarizeRequest, error)
	grpc.ServerStream
}

type juzuStreamingDiarizeServer struct {
	grpc.ServerStream
}

func (x *juzuStreamingDiarizeServer) Send(m *DiarizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *juzuStreamingDiarizeServer) Recv() (*StreamingDiarizeRequest, error) {
	m := new(StreamingDiarizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Juzu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.juzu.Juzu",
	HandlerType: (*JuzuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Juzu_Version_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Juzu_ListModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDiarize",
			Handler:       _Juzu_StreamingDiarize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "juzu.proto",
}
